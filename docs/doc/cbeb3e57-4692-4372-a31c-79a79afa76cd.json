{
    "summary": "The summary is about a code that involves text input, search execution, and mouse clicks using specified coordinates, as well as a circular movement function with start/end points, radius, and duration, and a get_last_assistant_message function to retrieve the last assistant message from an array.",
    "details": [
        {
            "comment": "Code comments:\n- `keyboard_type(text)` - Types the given text using keyboard and returns a message indicating typed text.\n- `search(text)` - Searches for program or file by typing in search bar and pressing Enter. Returns a message indicating the program or file has been opened.",
            "location": "\"/media/root/Toshiba XG3/works/self-operating-computer/docs/src/operate/utils/os.py\":0-43",
            "content": "import pyautogui\nimport platform\nimport time\nimport math\nfrom operate.utils.misc import convert_percent_to_decimal\ndef keyboard_type(text):\n    \"\"\"\n    Types the given text using the keyboard.\n    Args:\n        text (str): The text to be typed.\n    Returns:\n        str: A message indicating the typed text.\n    \"\"\"\n    text = text.replace(\"\\\\n\", \"\\n\")\n    for char in text:\n        pyautogui.write(char)\n    pyautogui.press(\"enter\")\n    return \"Type: \" + text\ndef search(text):\n    \"\"\"\n    Searches for a program or file by typing the given text in the search bar and pressing Enter.\n    Args:\n        text (str): The text to be searched.\n    Returns:\n        str: A message indicating that the program or file has been opened.\n    \"\"\"\n    if platform.system() == \"Windows\":\n        pyautogui.press(\"win\")\n    elif platform.system() == \"Linux\":\n        pyautogui.press(\"win\")\n    else:\n        # Press and release Command and Space separately\n        pyautogui.keyDown(\"command\")\n        pyautogui.press(\"space\")\n        pyautogui.keyUp(\"command\")"
        },
        {
            "comment": "Line 45-48: Type the text by pressing each character\nLine 49: Press enter after typing the text\nLine 50-79: Perform a mouse click at the specified coordinates\nLine 80-101: Click the program based on the given description",
            "location": "\"/media/root/Toshiba XG3/works/self-operating-computer/docs/src/operate/utils/os.py\":45-84",
            "content": "    time.sleep(1)\n    # Now type the text\n    for char in text:\n        pyautogui.write(char)\n    pyautogui.press(\"enter\")\n    return \"Open program: \" + text\ndef click(click_detail):\n    \"\"\"\n    Perform a mouse click at the specified coordinates.\n    Args:\n        click_detail (dict): A dictionary containing the coordinates of the click.\n    Returns:\n        str: The description of the click if successful, otherwise \"We failed to click\".\n    \"\"\"\n    try:\n        x = convert_percent_to_decimal(click_detail[\"x\"])\n        y = convert_percent_to_decimal(click_detail[\"y\"])\n        if click_detail and isinstance(x, float) and isinstance(y, float):\n            click_at_percentage(x, y)\n            return click_detail[\"description\"]\n        else:\n            return \"We failed to click\"\n    except Exception as e:\n        print(f\"Error parsing JSON: {e}\")\n        return \"We failed to click\"\ndef click_at_percentage(\n    x_percentage, y_percentage, duration=0.2, circle_radius=50, circle_duration=0.5\n):\n    \"\"\"\n    Moves the m"
        },
        {
            "comment": "Moves the cursor to a specific percentage of the screen and then performs a circular movement before clicking.",
            "location": "\"/media/root/Toshiba XG3/works/self-operating-computer/docs/src/operate/utils/os.py\":84-104",
            "content": "ouse cursor to a specified percentage of the screen and performs a circular movement before clicking.\n    Args:\n        x_percentage (float): The x-coordinate percentage of the screen to move the cursor to.\n        y_percentage (float): The y-coordinate percentage of the screen to move the cursor to.\n        duration (float, optional): The duration (in seconds) of the smooth cursor movement. Defaults to 0.2.\n        circle_radius (int, optional): The radius of the circular movement. Defaults to 50.\n        circle_duration (float, optional): The duration (in seconds) of the circular movement. Defaults to 0.5.\n    Returns:\n        str: A message indicating that the click was successful.\n    \"\"\"\n    # Get the size of the primary monitor\n    screen_width, screen_height = pyautogui.size()\n    # Calculate the x and y coordinates in pixels\n    x_pixel = int(screen_width * float(x_percentage))\n    y_pixel = int(screen_height * float(y_percentage))\n    # Move to the position smoothly\n    pyautogui.moveTo(x_pixel, y_pixel, duration=duration)"
        },
        {
            "comment": "For the code provided, here are some brief comments:\n\n1. The function is for circular movement, which takes start and end points as input parameters (x_pixel, y_pixel), circle radius, and duration. It calculates the intermediate position by using time elapsed and performs a circular movement towards the destination point.\n2. In the get_last_assistant_message function, it retrieves the last message from the assistant in the messages array. If the last assistant message is the first message in the array, return None. Otherwise, return the last assistant message.",
            "location": "\"/media/root/Toshiba XG3/works/self-operating-computer/docs/src/operate/utils/os.py\":106-130",
            "content": "    # Circular movement\n    start_time = time.time()\n    while time.time() - start_time < circle_duration:\n        angle = ((time.time() - start_time) / circle_duration) * 2 * math.pi\n        x = x_pixel + math.cos(angle) * circle_radius\n        y = y_pixel + math.sin(angle) * circle_radius\n        pyautogui.moveTo(x, y, duration=0.1)\n    # Finally, click\n    pyautogui.click(x_pixel, y_pixel)\n    return \"Successfully clicked\"\ndef get_last_assistant_message(messages):\n    \"\"\"\n    Retrieve the last message from the assistant in the messages array.\n    If the last assistant message is the first message in the array, return None.\n    \"\"\"\n    for index in reversed(range(len(messages))):\n        if messages[index][\"role\"] == \"assistant\":\n            if index == 0:  # Check if the assistant message is the first in the array\n                return None\n            else:\n                return messages[index]\n    return None  # Return None if no assistant message is found"
        }
    ]
}