{
    "summary": "The code consists of two functions: `convert_percent_to_decimal()` and `extract_json_from_string()`, which handle percentages and JSON structures, respectively. Additionally, it classifies user responses as DONE, CLICK, TYPE, or SEARCH using patterns, extracts relevant data, handles exceptions for invalid inputs or processing errors, and returns \"UNKNOWN\" with original data if no match found while extracting search data using regex.",
    "details": [
        {
            "comment": "This code defines two functions: `convert_percent_to_decimal()` and `extract_json_from_string()`. The first function converts a percentage string to a decimal value, while the second extracts a JSON structure from a string and returns it as a dictionary. Both functions handle exceptions in case of invalid inputs or errors during processing.",
            "location": "\"/media/root/Toshiba XG3/works/self-operating-computer/docs/src/operate/utils/misc.py\":0-40",
            "content": "import json\nimport re\ndef convert_percent_to_decimal(percent_str):\n    \"\"\"\n    Converts a percentage string to a decimal value.\n    Args:\n        percent_str (str): The percentage string to be converted.\n    Returns:\n        float: The decimal value equivalent to the percentage.\n    Raises:\n        ValueError: If the input string cannot be converted to a float.\n    Example:\n        >>> convert_percent_to_decimal(\"20%\")\n        0.2\n    \"\"\"\n    try:\n        # Remove the '%' sign and convert to float\n        decimal_value = float(percent_str.strip(\"%\"))\n        # Convert to decimal (e.g., 20% -> 0.20)\n        return decimal_value / 100\n    except ValueError as e:\n        print(f\"Error converting percent to decimal: {e}\")\n        return None\ndef extract_json_from_string(s):\n    \"\"\"\n    Extracts a JSON structure from a string and returns it as a dictionary.\n    Args:\n        s (str): The input string.\n    Returns:\n        dict: The extracted JSON structure as a dictionary, or None if no JSON structure is found or if there is an error parsing the JSON."
        },
        {
            "comment": "Extracts JSON structure from the response and returns a dictionary with type and data.\nRaises exception if error parsing JSON or if response is not in expected format.",
            "location": "\"/media/root/Toshiba XG3/works/self-operating-computer/docs/src/operate/utils/misc.py\":42-73",
            "content": "    \"\"\"\n    try:\n        # Find the start of the JSON structure\n        json_start = s.find(\"{\")\n        if json_start == -1:\n            return None\n        # Extract the JSON part and convert it to a dictionary\n        json_str = s[json_start:]\n        return json.loads(json_str)\n    except Exception as e:\n        print(f\"Error parsing JSON: {e}\")\n        return None\ndef parse_response(response):\n    \"\"\"\n    Parses the given response and returns a dictionary with the type and data.\n    Args:\n        response (str): The response to parse.\n    Returns:\n        dict: A dictionary with the type and data extracted from the response.\n              The dictionary has the following structure:\n              {\n                  \"type\": <response_type>,\n                  \"data\": <response_data>\n              }\n              If the response is \"DONE\", the type is \"DONE\" and the data is None.\n              If the response starts with \"CLICK\", the type is \"CLICK\" and the data is a JSON object.\n              If the response starts with \"TYPE\", the type is \"TYPE\" and the data is the text to type."
        },
        {
            "comment": "This code is parsing user responses and determining the appropriate type (DONE, CLICK, TYPE, or SEARCH) based on the response string. It also extracts relevant data for each type of response. If the response doesn't match any known patterns, it is classified as \"UNKNOWN\" with the original response retained.",
            "location": "\"/media/root/Toshiba XG3/works/self-operating-computer/docs/src/operate/utils/misc.py\":74-96",
            "content": "              If the response starts with \"SEARCH\", the type is \"SEARCH\" and the data is the search query.\n              If the response doesn't match any of the above patterns, the type is \"UNKNOWN\" and the data is the original response.\n    \"\"\"\n    if response == \"DONE\":\n        return {\"type\": \"DONE\", \"data\": None}\n    elif response.startswith(\"CLICK\"):\n        # Adjust the regex to match the correct format\n        click_data = re.search(r\"CLICK \\{ (.+) \\}\", response).group(1)\n        click_data_json = json.loads(f\"{{{click_data}}}\")\n        return {\"type\": \"CLICK\", \"data\": click_data_json}\n    elif response.startswith(\"TYPE\"):\n        # Extract the text to type\n        try:\n            type_data = re.search(r\"TYPE (.+)\", response, re.DOTALL).group(1)\n        except:\n            type_data = re.search(r'TYPE \"(.+)\"', response, re.DOTALL).group(1)\n        return {\"type\": \"TYPE\", \"data\": type_data}\n    elif response.startswith(\"SEARCH\"):\n        # Extract the search query\n        try:\n            search_data = re.search(r'SEARCH \"(.+)\"', response).group(1)"
        },
        {
            "comment": "Trying to extract search data from response using regex. If exception occurs, return search data as \"SEARCH\" type and original response as unknown type.",
            "location": "\"/media/root/Toshiba XG3/works/self-operating-computer/docs/src/operate/utils/misc.py\":97-101",
            "content": "        except:\n            search_data = re.search(r\"SEARCH (.+)\", response).group(1)\n        return {\"type\": \"SEARCH\", \"data\": search_data}\n    return {\"type\": \"UNKNOWN\", \"data\": response}"
        }
    ]
}